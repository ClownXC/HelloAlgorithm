package com.algorithm.dp;

/**
 *
 * @author chen
 *
 * 定义dp[n][k]表示从1到n构成的数中含有k个逆序对的个数，
 * 则我们可以推导出dp[n][k]和dp[n - 1][i]之间的递推关系：
 *
 * 如果我们把n放在最后一位，则所有的k个逆序对均来自于前n - 1个数所构成的逆序对，和n无关；
 * 如果我们把n放在倒数第二位，则有1个逆序对和n有关，有k - 1个逆序对来自前n - 1个数所构成的逆序对；
 *
 * ……
 *
 * 如果我们把n放在第一位，则有n-1个逆序对和n有关，k - (n - 1)个逆序对来自前n - 1个数所构成的逆序对
 *
 *
 * 所以：
 * dp[n][k] = dp[n-1][k]+dp[n-1][k-1]+dp[n-1][k-2]+…+dp[n-1][k+1-n+1]+dp[n-1][k-n+1]
 * 但问题是 k - (n - 1)有可能为负数，也就是说根据n和k的不同，
 * 上面的式子有可能从某个项之后就不合法了，我们这里先写出来占位，从而得到下面两个式子：
 * dp[n][k] = dp[n-1][k]+dp[n-1][k-1]+dp[n-1][k-2]+…+dp[n-1][k+1-n+1]+dp[n-1][k-n+1]
 * dp[n][k+1] = dp[n-1][k+1]+dp[n-1][k]+dp[n-1][k-1]+dp[n-1][k-2]+…+dp[n-1][k+1-n+1]
 * 把上面两个式子相减可以推导出：dp[n][k+1] = dp[n][k]+dp[n-1][k+1]-dp[n-1][k+1-n]。这样就可以写出代码了。
 * 当然由于dp[n][k]只和dp[n][x]，dp[n-1][x]有关，所以该代码还可以进一步将空间复杂度从O(nk)降低到O(k)。时间复杂度是O(nk)。
 *
 */
public class KInversePairsArray_629 {

    public static void main(String[] args) {

    }

}
